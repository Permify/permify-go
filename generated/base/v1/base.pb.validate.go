// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: base/v1/base.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Context with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Context) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContextValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContextValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContextValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ContextValidationError is the validation error returned by Context.Validate
// if the designated constraints aren't met.
type ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextValidationError) ErrorName() string { return "ContextValidationError" }

// Error satisfies the builtin error interface
func (e ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextValidationError{}

// Validate checks the field values on Child with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Child) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Child_Leaf:

		if m.GetLeaf() == nil {
			return ChildValidationError{
				field:  "Leaf",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetLeaf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChildValidationError{
					field:  "Leaf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Child_Rewrite:

		if m.GetRewrite() == nil {
			return ChildValidationError{
				field:  "Rewrite",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetRewrite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChildValidationError{
					field:  "Rewrite",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ChildValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ChildValidationError is the validation error returned by Child.Validate if
// the designated constraints aren't met.
type ChildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildValidationError) ErrorName() string { return "ChildValidationError" }

// Error satisfies the builtin error interface
func (e ChildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildValidationError{}

// Validate checks the field values on Leaf with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Leaf) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Leaf_ComputedUserSet:

		if m.GetComputedUserSet() == nil {
			return LeafValidationError{
				field:  "ComputedUserSet",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetComputedUserSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LeafValidationError{
					field:  "ComputedUserSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Leaf_TupleToUserSet:

		if m.GetTupleToUserSet() == nil {
			return LeafValidationError{
				field:  "TupleToUserSet",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetTupleToUserSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LeafValidationError{
					field:  "TupleToUserSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Leaf_ComputedAttribute:

		if m.GetComputedAttribute() == nil {
			return LeafValidationError{
				field:  "ComputedAttribute",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetComputedAttribute()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LeafValidationError{
					field:  "ComputedAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Leaf_Call:

		if m.GetCall() == nil {
			return LeafValidationError{
				field:  "Call",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LeafValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return LeafValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// LeafValidationError is the validation error returned by Leaf.Validate if the
// designated constraints aren't met.
type LeafValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeafValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeafValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeafValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeafValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeafValidationError) ErrorName() string { return "LeafValidationError" }

// Error satisfies the builtin error interface
func (e LeafValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeafValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeafValidationError{}

// Validate checks the field values on Rewrite with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Rewrite) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RewriteOperation

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RewriteValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RewriteValidationError is the validation error returned by Rewrite.Validate
// if the designated constraints aren't met.
type RewriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewriteValidationError) ErrorName() string { return "RewriteValidationError" }

// Error satisfies the builtin error interface
func (e RewriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewrite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewriteValidationError{}

// Validate checks the field values on SchemaDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SchemaDefinition) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetEntityDefinitions() {
		_ = val

		// no validation rules for EntityDefinitions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaDefinitionValidationError{
					field:  fmt.Sprintf("EntityDefinitions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetRuleDefinitions() {
		_ = val

		// no validation rules for RuleDefinitions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaDefinitionValidationError{
					field:  fmt.Sprintf("RuleDefinitions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for References

	return nil
}

// SchemaDefinitionValidationError is the validation error returned by
// SchemaDefinition.Validate if the designated constraints aren't met.
type SchemaDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaDefinitionValidationError) ErrorName() string { return "SchemaDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e SchemaDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaDefinitionValidationError{}

// Validate checks the field values on EntityDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EntityDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return EntityDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_EntityDefinition_Name_Pattern.MatchString(m.GetName()) {
		return EntityDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	for key, val := range m.GetRelations() {
		_ = val

		// no validation rules for Relations[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityDefinitionValidationError{
					field:  fmt.Sprintf("Relations[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetPermissions() {
		_ = val

		// no validation rules for Permissions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityDefinitionValidationError{
					field:  fmt.Sprintf("Permissions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetAttributes() {
		_ = val

		// no validation rules for Attributes[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityDefinitionValidationError{
					field:  fmt.Sprintf("Attributes[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for References

	return nil
}

// EntityDefinitionValidationError is the validation error returned by
// EntityDefinition.Validate if the designated constraints aren't met.
type EntityDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityDefinitionValidationError) ErrorName() string { return "EntityDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e EntityDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityDefinitionValidationError{}

var _EntityDefinition_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on RuleDefinition with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RuleDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return RuleDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_RuleDefinition_Name_Pattern.MatchString(m.GetName()) {
		return RuleDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	// no validation rules for Arguments

	if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleDefinitionValidationError{
				field:  "Expression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RuleDefinitionValidationError is the validation error returned by
// RuleDefinition.Validate if the designated constraints aren't met.
type RuleDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleDefinitionValidationError) ErrorName() string { return "RuleDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e RuleDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleDefinitionValidationError{}

var _RuleDefinition_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on AttributeDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AttributeDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return AttributeDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_AttributeDefinition_Name_Pattern.MatchString(m.GetName()) {
		return AttributeDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	// no validation rules for Type

	return nil
}

// AttributeDefinitionValidationError is the validation error returned by
// AttributeDefinition.Validate if the designated constraints aren't met.
type AttributeDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeDefinitionValidationError) ErrorName() string {
	return "AttributeDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeDefinitionValidationError{}

var _AttributeDefinition_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on RelationDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return RelationDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_RelationDefinition_Name_Pattern.MatchString(m.GetName()) {
		return RelationDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	for idx, item := range m.GetRelationReferences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationDefinitionValidationError{
					field:  fmt.Sprintf("RelationReferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RelationDefinitionValidationError is the validation error returned by
// RelationDefinition.Validate if the designated constraints aren't met.
type RelationDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationDefinitionValidationError) ErrorName() string {
	return "RelationDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e RelationDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationDefinitionValidationError{}

var _RelationDefinition_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on PermissionDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return PermissionDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_PermissionDefinition_Name_Pattern.MatchString(m.GetName()) {
		return PermissionDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if v, ok := interface{}(m.GetChild()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionDefinitionValidationError{
				field:  "Child",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionDefinitionValidationError is the validation error returned by
// PermissionDefinition.Validate if the designated constraints aren't met.
type PermissionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionDefinitionValidationError) ErrorName() string {
	return "PermissionDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionDefinitionValidationError{}

var _PermissionDefinition_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on RelationReference with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RelationReference) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetType()) > 64 {
		return RelationReferenceValidationError{
			field:  "Type",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_RelationReference_Type_Pattern.MatchString(m.GetType()) {
		return RelationReferenceValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if m.GetRelation() != "" {

		if len(m.GetRelation()) > 64 {
			return RelationReferenceValidationError{
				field:  "Relation",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_RelationReference_Relation_Pattern.MatchString(m.GetRelation()) {
			return RelationReferenceValidationError{
				field:  "Relation",
				reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
			}
		}

	}

	return nil
}

// RelationReferenceValidationError is the validation error returned by
// RelationReference.Validate if the designated constraints aren't met.
type RelationReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationReferenceValidationError) ErrorName() string {
	return "RelationReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e RelationReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationReferenceValidationError{}

var _RelationReference_Type_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

var _RelationReference_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on Argument with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Argument) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Argument_ComputedAttribute:

		if v, ok := interface{}(m.GetComputedAttribute()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArgumentValidationError{
					field:  "ComputedAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Argument_ContextAttribute:

		if v, ok := interface{}(m.GetContextAttribute()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArgumentValidationError{
					field:  "ContextAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ArgumentValidationError is the validation error returned by
// Argument.Validate if the designated constraints aren't met.
type ArgumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArgumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArgumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArgumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArgumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArgumentValidationError) ErrorName() string { return "ArgumentValidationError" }

// Error satisfies the builtin error interface
func (e ArgumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArgument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArgumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArgumentValidationError{}

// Validate checks the field values on Call with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Call) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RuleName

	for idx, item := range m.GetArguments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallValidationError{
					field:  fmt.Sprintf("Arguments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CallValidationError is the validation error returned by Call.Validate if the
// designated constraints aren't met.
type CallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallValidationError) ErrorName() string { return "CallValidationError" }

// Error satisfies the builtin error interface
func (e CallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallValidationError{}

// Validate checks the field values on ComputedAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ComputedAttribute) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return ComputedAttributeValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_ComputedAttribute_Name_Pattern.MatchString(m.GetName()) {
		return ComputedAttributeValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	return nil
}

// ComputedAttributeValidationError is the validation error returned by
// ComputedAttribute.Validate if the designated constraints aren't met.
type ComputedAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputedAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputedAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputedAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputedAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputedAttributeValidationError) ErrorName() string {
	return "ComputedAttributeValidationError"
}

// Error satisfies the builtin error interface
func (e ComputedAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputedAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputedAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputedAttributeValidationError{}

var _ComputedAttribute_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on ContextAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ContextAttribute) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return ContextAttributeValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_ContextAttribute_Name_Pattern.MatchString(m.GetName()) {
		return ContextAttributeValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	return nil
}

// ContextAttributeValidationError is the validation error returned by
// ContextAttribute.Validate if the designated constraints aren't met.
type ContextAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextAttributeValidationError) ErrorName() string { return "ContextAttributeValidationError" }

// Error satisfies the builtin error interface
func (e ContextAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContextAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextAttributeValidationError{}

var _ContextAttribute_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on ComputedUserSet with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ComputedUserSet) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRelation()) > 64 {
		return ComputedUserSetValidationError{
			field:  "Relation",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_ComputedUserSet_Relation_Pattern.MatchString(m.GetRelation()) {
		return ComputedUserSetValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	return nil
}

// ComputedUserSetValidationError is the validation error returned by
// ComputedUserSet.Validate if the designated constraints aren't met.
type ComputedUserSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputedUserSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputedUserSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputedUserSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputedUserSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputedUserSetValidationError) ErrorName() string { return "ComputedUserSetValidationError" }

// Error satisfies the builtin error interface
func (e ComputedUserSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputedUserSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputedUserSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputedUserSetValidationError{}

var _ComputedUserSet_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on TupleToUserSet with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TupleToUserSet) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTupleSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleToUserSetValidationError{
				field:  "TupleSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetComputed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleToUserSetValidationError{
				field:  "Computed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TupleToUserSetValidationError is the validation error returned by
// TupleToUserSet.Validate if the designated constraints aren't met.
type TupleToUserSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleToUserSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleToUserSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleToUserSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleToUserSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleToUserSetValidationError) ErrorName() string { return "TupleToUserSetValidationError" }

// Error satisfies the builtin error interface
func (e TupleToUserSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleToUserSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleToUserSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleToUserSetValidationError{}

// Validate checks the field values on TupleSet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TupleSet) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRelation()) > 64 {
		return TupleSetValidationError{
			field:  "Relation",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_TupleSet_Relation_Pattern.MatchString(m.GetRelation()) {
		return TupleSetValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	return nil
}

// TupleSetValidationError is the validation error returned by
// TupleSet.Validate if the designated constraints aren't met.
type TupleSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleSetValidationError) ErrorName() string { return "TupleSetValidationError" }

// Error satisfies the builtin error interface
func (e TupleSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleSetValidationError{}

var _TupleSet_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on Tuple with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Tuple) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEntity() == nil {
		return TupleValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRelation()) > 64 {
		return TupleValidationError{
			field:  "Relation",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_Tuple_Relation_Pattern.MatchString(m.GetRelation()) {
		return TupleValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if m.GetSubject() == nil {
		return TupleValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TupleValidationError is the validation error returned by Tuple.Validate if
// the designated constraints aren't met.
type TupleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleValidationError) ErrorName() string { return "TupleValidationError" }

// Error satisfies the builtin error interface
func (e TupleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTuple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleValidationError{}

var _Tuple_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on Attribute with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attribute) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEntity() == nil {
		return AttributeValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttributeValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attribute

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttributeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AttributeValidationError is the validation error returned by
// Attribute.Validate if the designated constraints aren't met.
type AttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValidationError) ErrorName() string { return "AttributeValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValidationError{}

// Validate checks the field values on Tuples with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Tuples) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TuplesValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TuplesValidationError is the validation error returned by Tuples.Validate if
// the designated constraints aren't met.
type TuplesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TuplesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TuplesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TuplesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TuplesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TuplesValidationError) ErrorName() string { return "TuplesValidationError" }

// Error satisfies the builtin error interface
func (e TuplesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTuples.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TuplesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TuplesValidationError{}

// Validate checks the field values on Attributes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Attributes) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttributesValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AttributesValidationError is the validation error returned by
// Attributes.Validate if the designated constraints aren't met.
type AttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributesValidationError) ErrorName() string { return "AttributesValidationError" }

// Error satisfies the builtin error interface
func (e AttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributesValidationError{}

// Validate checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Entity) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetType()) > 64 {
		return EntityValidationError{
			field:  "Type",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_Entity_Type_Pattern.MatchString(m.GetType()) {
		return EntityValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if len(m.GetId()) > 128 {
		return EntityValidationError{
			field:  "Id",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_Entity_Id_Pattern.MatchString(m.GetId()) {
		return EntityValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	return nil
}

// EntityValidationError is the validation error returned by Entity.Validate if
// the designated constraints aren't met.
type EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityValidationError) ErrorName() string { return "EntityValidationError" }

// Error satisfies the builtin error interface
func (e EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityValidationError{}

var _Entity_Type_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

var _Entity_Id_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on EntityAndRelation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EntityAndRelation) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEntity() == nil {
		return EntityAndRelationValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityAndRelationValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRelation()) > 64 {
		return EntityAndRelationValidationError{
			field:  "Relation",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_EntityAndRelation_Relation_Pattern.MatchString(m.GetRelation()) {
		return EntityAndRelationValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	return nil
}

// EntityAndRelationValidationError is the validation error returned by
// EntityAndRelation.Validate if the designated constraints aren't met.
type EntityAndRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityAndRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityAndRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityAndRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityAndRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityAndRelationValidationError) ErrorName() string {
	return "EntityAndRelationValidationError"
}

// Error satisfies the builtin error interface
func (e EntityAndRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityAndRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityAndRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityAndRelationValidationError{}

var _EntityAndRelation_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Subject) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetType()) > 64 {
		return SubjectValidationError{
			field:  "Type",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_Subject_Type_Pattern.MatchString(m.GetType()) {
		return SubjectValidationError{
			field:  "Type",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if len(m.GetId()) > 128 {
		return SubjectValidationError{
			field:  "Id",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_Subject_Id_Pattern.MatchString(m.GetId()) {
		return SubjectValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetRelation() != "" {

		if len(m.GetRelation()) > 64 {
			return SubjectValidationError{
				field:  "Relation",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_Subject_Relation_Pattern.MatchString(m.GetRelation()) {
			return SubjectValidationError{
				field:  "Relation",
				reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
			}
		}

	}

	return nil
}

// SubjectValidationError is the validation error returned by Subject.Validate
// if the designated constraints aren't met.
type SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectValidationError) ErrorName() string { return "SubjectValidationError" }

// Error satisfies the builtin error interface
func (e SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectValidationError{}

var _Subject_Type_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

var _Subject_Id_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

var _Subject_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on AttributeFilter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AttributeFilter) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttributeFilterValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AttributeFilterValidationError is the validation error returned by
// AttributeFilter.Validate if the designated constraints aren't met.
type AttributeFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeFilterValidationError) ErrorName() string { return "AttributeFilterValidationError" }

// Error satisfies the builtin error interface
func (e AttributeFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeFilterValidationError{}

// Validate checks the field values on TupleFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TupleFilter) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleFilterValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRelation() != "" {

		if len(m.GetRelation()) > 64 {
			return TupleFilterValidationError{
				field:  "Relation",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_TupleFilter_Relation_Pattern.MatchString(m.GetRelation()) {
			return TupleFilterValidationError{
				field:  "Relation",
				reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
			}
		}

	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleFilterValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TupleFilterValidationError is the validation error returned by
// TupleFilter.Validate if the designated constraints aren't met.
type TupleFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleFilterValidationError) ErrorName() string { return "TupleFilterValidationError" }

// Error satisfies the builtin error interface
func (e TupleFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleFilterValidationError{}

var _TupleFilter_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on EntityFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EntityFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	return nil
}

// EntityFilterValidationError is the validation error returned by
// EntityFilter.Validate if the designated constraints aren't met.
type EntityFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityFilterValidationError) ErrorName() string { return "EntityFilterValidationError" }

// Error satisfies the builtin error interface
func (e EntityFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityFilterValidationError{}

// Validate checks the field values on SubjectFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SubjectFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if m.GetRelation() != "" {

		if len(m.GetRelation()) > 64 {
			return SubjectFilterValidationError{
				field:  "Relation",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_SubjectFilter_Relation_Pattern.MatchString(m.GetRelation()) {
			return SubjectFilterValidationError{
				field:  "Relation",
				reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
			}
		}

	}

	return nil
}

// SubjectFilterValidationError is the validation error returned by
// SubjectFilter.Validate if the designated constraints aren't met.
type SubjectFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectFilterValidationError) ErrorName() string { return "SubjectFilterValidationError" }

// Error satisfies the builtin error interface
func (e SubjectFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectFilterValidationError{}

var _SubjectFilter_Relation_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on ExpandTreeNode with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExpandTreeNode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Operation

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandTreeNodeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ExpandTreeNodeValidationError is the validation error returned by
// ExpandTreeNode.Validate if the designated constraints aren't met.
type ExpandTreeNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandTreeNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandTreeNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandTreeNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandTreeNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandTreeNodeValidationError) ErrorName() string { return "ExpandTreeNodeValidationError" }

// Error satisfies the builtin error interface
func (e ExpandTreeNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandTreeNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandTreeNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandTreeNodeValidationError{}

// Validate checks the field values on Expand with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Expand) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpandValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Permission

	for idx, item := range m.GetArguments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandValidationError{
					field:  fmt.Sprintf("Arguments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.Node.(type) {

	case *Expand_Expand:

		if v, ok := interface{}(m.GetExpand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandValidationError{
					field:  "Expand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expand_Leaf:

		if v, ok := interface{}(m.GetLeaf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandValidationError{
					field:  "Leaf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ExpandValidationError is the validation error returned by Expand.Validate if
// the designated constraints aren't met.
type ExpandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandValidationError) ErrorName() string { return "ExpandValidationError" }

// Error satisfies the builtin error interface
func (e ExpandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandValidationError{}

// Validate checks the field values on ExpandLeaf with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ExpandLeaf) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *ExpandLeaf_Subjects:

		if v, ok := interface{}(m.GetSubjects()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandLeafValidationError{
					field:  "Subjects",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExpandLeaf_Values:

		if v, ok := interface{}(m.GetValues()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandLeafValidationError{
					field:  "Values",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExpandLeaf_Value:

		if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandLeafValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ExpandLeafValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ExpandLeafValidationError is the validation error returned by
// ExpandLeaf.Validate if the designated constraints aren't met.
type ExpandLeafValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandLeafValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandLeafValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandLeafValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandLeafValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandLeafValidationError) ErrorName() string { return "ExpandLeafValidationError" }

// Error satisfies the builtin error interface
func (e ExpandLeafValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandLeaf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandLeafValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandLeafValidationError{}

// Validate checks the field values on Values with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Values) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetValues() {
		_ = val

		// no validation rules for Values[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValuesValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValuesValidationError is the validation error returned by Values.Validate if
// the designated constraints aren't met.
type ValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValuesValidationError) ErrorName() string { return "ValuesValidationError" }

// Error satisfies the builtin error interface
func (e ValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValuesValidationError{}

// Validate checks the field values on Subjects with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Subjects) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectsValidationError{
					field:  fmt.Sprintf("Subjects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubjectsValidationError is the validation error returned by
// Subjects.Validate if the designated constraints aren't met.
type SubjectsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectsValidationError) ErrorName() string { return "SubjectsValidationError" }

// Error satisfies the builtin error interface
func (e SubjectsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjects.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectsValidationError{}

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Tenant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on DataChanges with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DataChanges) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	for idx, item := range m.GetDataChanges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataChangesValidationError{
					field:  fmt.Sprintf("DataChanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DataChangesValidationError is the validation error returned by
// DataChanges.Validate if the designated constraints aren't met.
type DataChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataChangesValidationError) ErrorName() string { return "DataChangesValidationError" }

// Error satisfies the builtin error interface
func (e DataChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataChanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataChangesValidationError{}

// Validate checks the field values on DataChange with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataChange) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Operation

	switch m.Type.(type) {

	case *DataChange_Tuple:

		if v, ok := interface{}(m.GetTuple()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataChangeValidationError{
					field:  "Tuple",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataChange_Attribute:

		if v, ok := interface{}(m.GetAttribute()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataChangeValidationError{
					field:  "Attribute",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return DataChangeValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// DataChangeValidationError is the validation error returned by
// DataChange.Validate if the designated constraints aren't met.
type DataChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataChangeValidationError) ErrorName() string { return "DataChangeValidationError" }

// Error satisfies the builtin error interface
func (e DataChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataChangeValidationError{}

// Validate checks the field values on StringValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// StringValueValidationError is the validation error returned by
// StringValue.Validate if the designated constraints aren't met.
type StringValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringValueValidationError) ErrorName() string { return "StringValueValidationError" }

// Error satisfies the builtin error interface
func (e StringValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringValueValidationError{}

// Validate checks the field values on IntegerValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IntegerValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// IntegerValueValidationError is the validation error returned by
// IntegerValue.Validate if the designated constraints aren't met.
type IntegerValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegerValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegerValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegerValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegerValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegerValueValidationError) ErrorName() string { return "IntegerValueValidationError" }

// Error satisfies the builtin error interface
func (e IntegerValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegerValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegerValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegerValueValidationError{}

// Validate checks the field values on DoubleValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DoubleValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// DoubleValueValidationError is the validation error returned by
// DoubleValue.Validate if the designated constraints aren't met.
type DoubleValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleValueValidationError) ErrorName() string { return "DoubleValueValidationError" }

// Error satisfies the builtin error interface
func (e DoubleValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleValueValidationError{}

// Validate checks the field values on BooleanValue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BooleanValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// BooleanValueValidationError is the validation error returned by
// BooleanValue.Validate if the designated constraints aren't met.
type BooleanValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BooleanValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BooleanValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BooleanValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BooleanValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BooleanValueValidationError) ErrorName() string { return "BooleanValueValidationError" }

// Error satisfies the builtin error interface
func (e BooleanValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooleanValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BooleanValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BooleanValueValidationError{}

// Validate checks the field values on StringArrayValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StringArrayValue) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StringArrayValueValidationError is the validation error returned by
// StringArrayValue.Validate if the designated constraints aren't met.
type StringArrayValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringArrayValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringArrayValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringArrayValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringArrayValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringArrayValueValidationError) ErrorName() string { return "StringArrayValueValidationError" }

// Error satisfies the builtin error interface
func (e StringArrayValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringArrayValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringArrayValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringArrayValueValidationError{}

// Validate checks the field values on IntegerArrayValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IntegerArrayValue) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// IntegerArrayValueValidationError is the validation error returned by
// IntegerArrayValue.Validate if the designated constraints aren't met.
type IntegerArrayValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegerArrayValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegerArrayValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegerArrayValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegerArrayValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegerArrayValueValidationError) ErrorName() string {
	return "IntegerArrayValueValidationError"
}

// Error satisfies the builtin error interface
func (e IntegerArrayValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegerArrayValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegerArrayValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegerArrayValueValidationError{}

// Validate checks the field values on DoubleArrayValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DoubleArrayValue) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DoubleArrayValueValidationError is the validation error returned by
// DoubleArrayValue.Validate if the designated constraints aren't met.
type DoubleArrayValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleArrayValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleArrayValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleArrayValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleArrayValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleArrayValueValidationError) ErrorName() string { return "DoubleArrayValueValidationError" }

// Error satisfies the builtin error interface
func (e DoubleArrayValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleArrayValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleArrayValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleArrayValueValidationError{}

// Validate checks the field values on BooleanArrayValue with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BooleanArrayValue) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BooleanArrayValueValidationError is the validation error returned by
// BooleanArrayValue.Validate if the designated constraints aren't met.
type BooleanArrayValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BooleanArrayValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BooleanArrayValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BooleanArrayValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BooleanArrayValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BooleanArrayValueValidationError) ErrorName() string {
	return "BooleanArrayValueValidationError"
}

// Error satisfies the builtin error interface
func (e BooleanArrayValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooleanArrayValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BooleanArrayValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BooleanArrayValueValidationError{}

// Validate checks the field values on DataBundle with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataBundle) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetOperations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataBundleValidationError{
					field:  fmt.Sprintf("Operations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DataBundleValidationError is the validation error returned by
// DataBundle.Validate if the designated constraints aren't met.
type DataBundleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataBundleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataBundleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataBundleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataBundleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataBundleValidationError) ErrorName() string { return "DataBundleValidationError" }

// Error satisfies the builtin error interface
func (e DataBundleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataBundle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataBundleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataBundleValidationError{}

// Validate checks the field values on Operation with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Operation) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OperationValidationError is the validation error returned by
// Operation.Validate if the designated constraints aren't met.
type OperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperationValidationError) ErrorName() string { return "OperationValidationError" }

// Error satisfies the builtin error interface
func (e OperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperationValidationError{}

// Validate checks the field values on Partials with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Partials) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PartialsValidationError is the validation error returned by
// Partials.Validate if the designated constraints aren't met.
type PartialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartialsValidationError) ErrorName() string { return "PartialsValidationError" }

// Error satisfies the builtin error interface
func (e PartialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartialsValidationError{}
