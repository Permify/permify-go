// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: base/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PermissionCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionCheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return PermissionCheckRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_PermissionCheckRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return PermissionCheckRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return PermissionCheckRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionCheckRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEntity() == nil {
		return PermissionCheckRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionCheckRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetPermission()) > 64 {
		return PermissionCheckRequestValidationError{
			field:  "Permission",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_PermissionCheckRequest_Permission_Pattern.MatchString(m.GetPermission()) {
		return PermissionCheckRequestValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if m.GetSubject() == nil {
		return PermissionCheckRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionCheckRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionCheckRequestValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArguments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionCheckRequestValidationError{
					field:  fmt.Sprintf("Arguments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PermissionCheckRequestValidationError is the validation error returned by
// PermissionCheckRequest.Validate if the designated constraints aren't met.
type PermissionCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckRequestValidationError) ErrorName() string {
	return "PermissionCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckRequestValidationError{}

var _PermissionCheckRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

var _PermissionCheckRequest_Permission_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on PermissionCheckRequestMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionCheckRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	// no validation rules for SnapToken

	if m.GetDepth() < 3 {
		return PermissionCheckRequestMetadataValidationError{
			field:  "Depth",
			reason: "value must be greater than or equal to 3",
		}
	}

	return nil
}

// PermissionCheckRequestMetadataValidationError is the validation error
// returned by PermissionCheckRequestMetadata.Validate if the designated
// constraints aren't met.
type PermissionCheckRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckRequestMetadataValidationError) ErrorName() string {
	return "PermissionCheckRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckRequestMetadataValidationError{}

// Validate checks the field values on PermissionCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Can

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionCheckResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionCheckResponseValidationError is the validation error returned by
// PermissionCheckResponse.Validate if the designated constraints aren't met.
type PermissionCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckResponseValidationError) ErrorName() string {
	return "PermissionCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckResponseValidationError{}

// Validate checks the field values on PermissionCheckResponseMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionCheckResponseMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CheckCount

	return nil
}

// PermissionCheckResponseMetadataValidationError is the validation error
// returned by PermissionCheckResponseMetadata.Validate if the designated
// constraints aren't met.
type PermissionCheckResponseMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionCheckResponseMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionCheckResponseMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionCheckResponseMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionCheckResponseMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionCheckResponseMetadataValidationError) ErrorName() string {
	return "PermissionCheckResponseMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionCheckResponseMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionCheckResponseMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionCheckResponseMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionCheckResponseMetadataValidationError{}

// Validate checks the field values on PermissionExpandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionExpandRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 64 {
		return PermissionExpandRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_PermissionExpandRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return PermissionExpandRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"[a-zA-Z0-9-,]+\"",
		}
	}

	if m.GetMetadata() == nil {
		return PermissionExpandRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionExpandRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEntity() == nil {
		return PermissionExpandRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionExpandRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPermission() != "" {

		if len(m.GetPermission()) > 64 {
			return PermissionExpandRequestValidationError{
				field:  "Permission",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_PermissionExpandRequest_Permission_Pattern.MatchString(m.GetPermission()) {
			return PermissionExpandRequestValidationError{
				field:  "Permission",
				reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
			}
		}

	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionExpandRequestValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArguments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionExpandRequestValidationError{
					field:  fmt.Sprintf("Arguments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PermissionExpandRequestValidationError is the validation error returned by
// PermissionExpandRequest.Validate if the designated constraints aren't met.
type PermissionExpandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionExpandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionExpandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionExpandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionExpandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionExpandRequestValidationError) ErrorName() string {
	return "PermissionExpandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionExpandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionExpandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionExpandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionExpandRequestValidationError{}

var _PermissionExpandRequest_TenantId_Pattern = regexp.MustCompile("[a-zA-Z0-9-,]+")

var _PermissionExpandRequest_Permission_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on PermissionExpandRequestMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionExpandRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	// no validation rules for SnapToken

	return nil
}

// PermissionExpandRequestMetadataValidationError is the validation error
// returned by PermissionExpandRequestMetadata.Validate if the designated
// constraints aren't met.
type PermissionExpandRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionExpandRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionExpandRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionExpandRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionExpandRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionExpandRequestMetadataValidationError) ErrorName() string {
	return "PermissionExpandRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionExpandRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionExpandRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionExpandRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionExpandRequestMetadataValidationError{}

// Validate checks the field values on PermissionExpandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionExpandResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTree()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionExpandResponseValidationError{
				field:  "Tree",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionExpandResponseValidationError is the validation error returned by
// PermissionExpandResponse.Validate if the designated constraints aren't met.
type PermissionExpandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionExpandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionExpandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionExpandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionExpandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionExpandResponseValidationError) ErrorName() string {
	return "PermissionExpandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionExpandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionExpandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionExpandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionExpandResponseValidationError{}

// Validate checks the field values on PermissionLookupEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionLookupEntityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return PermissionLookupEntityRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_PermissionLookupEntityRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return PermissionLookupEntityRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return PermissionLookupEntityRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionLookupEntityRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetEntityType()) > 64 {
		return PermissionLookupEntityRequestValidationError{
			field:  "EntityType",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_PermissionLookupEntityRequest_EntityType_Pattern.MatchString(m.GetEntityType()) {
		return PermissionLookupEntityRequestValidationError{
			field:  "EntityType",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if len(m.GetPermission()) > 64 {
		return PermissionLookupEntityRequestValidationError{
			field:  "Permission",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_PermissionLookupEntityRequest_Permission_Pattern.MatchString(m.GetPermission()) {
		return PermissionLookupEntityRequestValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if m.GetSubject() == nil {
		return PermissionLookupEntityRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionLookupEntityRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionLookupEntityRequestValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionLookupEntityRequestValidationError is the validation error
// returned by PermissionLookupEntityRequest.Validate if the designated
// constraints aren't met.
type PermissionLookupEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionLookupEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionLookupEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionLookupEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionLookupEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionLookupEntityRequestValidationError) ErrorName() string {
	return "PermissionLookupEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionLookupEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionLookupEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionLookupEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionLookupEntityRequestValidationError{}

var _PermissionLookupEntityRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

var _PermissionLookupEntityRequest_EntityType_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

var _PermissionLookupEntityRequest_Permission_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on PermissionLookupEntityRequestMetadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *PermissionLookupEntityRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	// no validation rules for SnapToken

	if m.GetDepth() < 3 {
		return PermissionLookupEntityRequestMetadataValidationError{
			field:  "Depth",
			reason: "value must be greater than or equal to 3",
		}
	}

	return nil
}

// PermissionLookupEntityRequestMetadataValidationError is the validation error
// returned by PermissionLookupEntityRequestMetadata.Validate if the
// designated constraints aren't met.
type PermissionLookupEntityRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionLookupEntityRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionLookupEntityRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionLookupEntityRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionLookupEntityRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionLookupEntityRequestMetadataValidationError) ErrorName() string {
	return "PermissionLookupEntityRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionLookupEntityRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionLookupEntityRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionLookupEntityRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionLookupEntityRequestMetadataValidationError{}

// Validate checks the field values on PermissionLookupEntityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionLookupEntityResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PermissionLookupEntityResponseValidationError is the validation error
// returned by PermissionLookupEntityResponse.Validate if the designated
// constraints aren't met.
type PermissionLookupEntityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionLookupEntityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionLookupEntityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionLookupEntityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionLookupEntityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionLookupEntityResponseValidationError) ErrorName() string {
	return "PermissionLookupEntityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionLookupEntityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionLookupEntityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionLookupEntityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionLookupEntityResponseValidationError{}

// Validate checks the field values on PermissionLookupEntityStreamResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *PermissionLookupEntityStreamResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EntityId

	return nil
}

// PermissionLookupEntityStreamResponseValidationError is the validation error
// returned by PermissionLookupEntityStreamResponse.Validate if the designated
// constraints aren't met.
type PermissionLookupEntityStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionLookupEntityStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionLookupEntityStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionLookupEntityStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionLookupEntityStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionLookupEntityStreamResponseValidationError) ErrorName() string {
	return "PermissionLookupEntityStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionLookupEntityStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionLookupEntityStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionLookupEntityStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionLookupEntityStreamResponseValidationError{}

// Validate checks the field values on PermissionEntityFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionEntityFilterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return PermissionEntityFilterRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_PermissionEntityFilterRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return PermissionEntityFilterRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return PermissionEntityFilterRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionEntityFilterRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEntityReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionEntityFilterRequestValidationError{
				field:  "EntityReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionEntityFilterRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionEntityFilterRequestValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionEntityFilterRequestValidationError is the validation error
// returned by PermissionEntityFilterRequest.Validate if the designated
// constraints aren't met.
type PermissionEntityFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionEntityFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionEntityFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionEntityFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionEntityFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionEntityFilterRequestValidationError) ErrorName() string {
	return "PermissionEntityFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionEntityFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionEntityFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionEntityFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionEntityFilterRequestValidationError{}

var _PermissionEntityFilterRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on PermissionEntityFilterRequestMetadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *PermissionEntityFilterRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	// no validation rules for SnapToken

	if m.GetDepth() < 3 {
		return PermissionEntityFilterRequestMetadataValidationError{
			field:  "Depth",
			reason: "value must be greater than or equal to 3",
		}
	}

	return nil
}

// PermissionEntityFilterRequestMetadataValidationError is the validation error
// returned by PermissionEntityFilterRequestMetadata.Validate if the
// designated constraints aren't met.
type PermissionEntityFilterRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionEntityFilterRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionEntityFilterRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionEntityFilterRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionEntityFilterRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionEntityFilterRequestMetadataValidationError) ErrorName() string {
	return "PermissionEntityFilterRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionEntityFilterRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionEntityFilterRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionEntityFilterRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionEntityFilterRequestMetadataValidationError{}

// Validate checks the field values on PermissionLookupSubjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionLookupSubjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return PermissionLookupSubjectRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_PermissionLookupSubjectRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return PermissionLookupSubjectRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return PermissionLookupSubjectRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionLookupSubjectRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEntity() == nil {
		return PermissionLookupSubjectRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionLookupSubjectRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetPermission()) > 64 {
		return PermissionLookupSubjectRequestValidationError{
			field:  "Permission",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_PermissionLookupSubjectRequest_Permission_Pattern.MatchString(m.GetPermission()) {
		return PermissionLookupSubjectRequestValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[a-zA-Z_]{1,64}$\"",
		}
	}

	if v, ok := interface{}(m.GetSubjectReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionLookupSubjectRequestValidationError{
				field:  "SubjectReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionLookupSubjectRequestValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionLookupSubjectRequestValidationError is the validation error
// returned by PermissionLookupSubjectRequest.Validate if the designated
// constraints aren't met.
type PermissionLookupSubjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionLookupSubjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionLookupSubjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionLookupSubjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionLookupSubjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionLookupSubjectRequestValidationError) ErrorName() string {
	return "PermissionLookupSubjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionLookupSubjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionLookupSubjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionLookupSubjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionLookupSubjectRequestValidationError{}

var _PermissionLookupSubjectRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

var _PermissionLookupSubjectRequest_Permission_Pattern = regexp.MustCompile("^[a-zA-Z_]{1,64}$")

// Validate checks the field values on PermissionLookupSubjectRequestMetadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *PermissionLookupSubjectRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	// no validation rules for SnapToken

	if m.GetDepth() < 3 {
		return PermissionLookupSubjectRequestMetadataValidationError{
			field:  "Depth",
			reason: "value must be greater than or equal to 3",
		}
	}

	return nil
}

// PermissionLookupSubjectRequestMetadataValidationError is the validation
// error returned by PermissionLookupSubjectRequestMetadata.Validate if the
// designated constraints aren't met.
type PermissionLookupSubjectRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionLookupSubjectRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionLookupSubjectRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionLookupSubjectRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionLookupSubjectRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionLookupSubjectRequestMetadataValidationError) ErrorName() string {
	return "PermissionLookupSubjectRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionLookupSubjectRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionLookupSubjectRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionLookupSubjectRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionLookupSubjectRequestMetadataValidationError{}

// Validate checks the field values on PermissionLookupSubjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermissionLookupSubjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PermissionLookupSubjectResponseValidationError is the validation error
// returned by PermissionLookupSubjectResponse.Validate if the designated
// constraints aren't met.
type PermissionLookupSubjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionLookupSubjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionLookupSubjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionLookupSubjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionLookupSubjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionLookupSubjectResponseValidationError) ErrorName() string {
	return "PermissionLookupSubjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionLookupSubjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionLookupSubjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionLookupSubjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionLookupSubjectResponseValidationError{}

// Validate checks the field values on PermissionSubjectPermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PermissionSubjectPermissionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return PermissionSubjectPermissionRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_PermissionSubjectPermissionRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return PermissionSubjectPermissionRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return PermissionSubjectPermissionRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionSubjectPermissionRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEntity() == nil {
		return PermissionSubjectPermissionRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionSubjectPermissionRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSubject() == nil {
		return PermissionSubjectPermissionRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionSubjectPermissionRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionSubjectPermissionRequestValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionSubjectPermissionRequestValidationError is the validation error
// returned by PermissionSubjectPermissionRequest.Validate if the designated
// constraints aren't met.
type PermissionSubjectPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionSubjectPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionSubjectPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionSubjectPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionSubjectPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionSubjectPermissionRequestValidationError) ErrorName() string {
	return "PermissionSubjectPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionSubjectPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionSubjectPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionSubjectPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionSubjectPermissionRequestValidationError{}

var _PermissionSubjectPermissionRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on
// PermissionSubjectPermissionRequestMetadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PermissionSubjectPermissionRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	// no validation rules for SnapToken

	// no validation rules for OnlyPermission

	if m.GetDepth() < 3 {
		return PermissionSubjectPermissionRequestMetadataValidationError{
			field:  "Depth",
			reason: "value must be greater than or equal to 3",
		}
	}

	return nil
}

// PermissionSubjectPermissionRequestMetadataValidationError is the validation
// error returned by PermissionSubjectPermissionRequestMetadata.Validate if
// the designated constraints aren't met.
type PermissionSubjectPermissionRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionSubjectPermissionRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionSubjectPermissionRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionSubjectPermissionRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionSubjectPermissionRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionSubjectPermissionRequestMetadataValidationError) ErrorName() string {
	return "PermissionSubjectPermissionRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionSubjectPermissionRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionSubjectPermissionRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionSubjectPermissionRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionSubjectPermissionRequestMetadataValidationError{}

// Validate checks the field values on PermissionSubjectPermissionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *PermissionSubjectPermissionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Results

	return nil
}

// PermissionSubjectPermissionResponseValidationError is the validation error
// returned by PermissionSubjectPermissionResponse.Validate if the designated
// constraints aren't met.
type PermissionSubjectPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionSubjectPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionSubjectPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionSubjectPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionSubjectPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionSubjectPermissionResponseValidationError) ErrorName() string {
	return "PermissionSubjectPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionSubjectPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionSubjectPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionSubjectPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionSubjectPermissionResponseValidationError{}

// Validate checks the field values on WatchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WatchRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 64 {
		return WatchRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_WatchRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return WatchRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"[a-zA-Z0-9-,]+\"",
		}
	}

	// no validation rules for SnapToken

	return nil
}

// WatchRequestValidationError is the validation error returned by
// WatchRequest.Validate if the designated constraints aren't met.
type WatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRequestValidationError) ErrorName() string { return "WatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e WatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRequestValidationError{}

var _WatchRequest_TenantId_Pattern = regexp.MustCompile("[a-zA-Z0-9-,]+")

// Validate checks the field values on WatchResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WatchResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetChanges()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchResponseValidationError{
				field:  "Changes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WatchResponseValidationError is the validation error returned by
// WatchResponse.Validate if the designated constraints aren't met.
type WatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchResponseValidationError) ErrorName() string { return "WatchResponseValidationError" }

// Error satisfies the builtin error interface
func (e WatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchResponseValidationError{}

// Validate checks the field values on SchemaWriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaWriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return SchemaWriteRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_SchemaWriteRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return SchemaWriteRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	// no validation rules for Schema

	return nil
}

// SchemaWriteRequestValidationError is the validation error returned by
// SchemaWriteRequest.Validate if the designated constraints aren't met.
type SchemaWriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaWriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaWriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaWriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaWriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaWriteRequestValidationError) ErrorName() string {
	return "SchemaWriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaWriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaWriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaWriteRequestValidationError{}

var _SchemaWriteRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on SchemaWriteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaWriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	return nil
}

// SchemaWriteResponseValidationError is the validation error returned by
// SchemaWriteResponse.Validate if the designated constraints aren't met.
type SchemaWriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaWriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaWriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaWriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaWriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaWriteResponseValidationError) ErrorName() string {
	return "SchemaWriteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaWriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaWriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaWriteResponseValidationError{}

// Validate checks the field values on SchemaReadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SchemaReadRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return SchemaReadRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_SchemaReadRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return SchemaReadRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return SchemaReadRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaReadRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SchemaReadRequestValidationError is the validation error returned by
// SchemaReadRequest.Validate if the designated constraints aren't met.
type SchemaReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaReadRequestValidationError) ErrorName() string {
	return "SchemaReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaReadRequestValidationError{}

var _SchemaReadRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on SchemaReadRequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaReadRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	return nil
}

// SchemaReadRequestMetadataValidationError is the validation error returned by
// SchemaReadRequestMetadata.Validate if the designated constraints aren't met.
type SchemaReadRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaReadRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaReadRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaReadRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaReadRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaReadRequestMetadataValidationError) ErrorName() string {
	return "SchemaReadRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaReadRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaReadRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaReadRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaReadRequestMetadataValidationError{}

// Validate checks the field values on SchemaReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaReadResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaReadResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SchemaReadResponseValidationError is the validation error returned by
// SchemaReadResponse.Validate if the designated constraints aren't met.
type SchemaReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaReadResponseValidationError) ErrorName() string {
	return "SchemaReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaReadResponseValidationError{}

// Validate checks the field values on DataWriteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DataWriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return DataWriteRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_DataWriteRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return DataWriteRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return DataWriteRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataWriteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetTuples()) > 100 {
		return DataWriteRequestValidationError{
			field:  "Tuples",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if item == nil {
			return DataWriteRequestValidationError{
				field:  fmt.Sprintf("Tuples[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataWriteRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetAttributes()) > 100 {
		return DataWriteRequestValidationError{
			field:  "Attributes",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if item == nil {
			return DataWriteRequestValidationError{
				field:  fmt.Sprintf("Attributes[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataWriteRequestValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DataWriteRequestValidationError is the validation error returned by
// DataWriteRequest.Validate if the designated constraints aren't met.
type DataWriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataWriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataWriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataWriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataWriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataWriteRequestValidationError) ErrorName() string { return "DataWriteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DataWriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataWriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataWriteRequestValidationError{}

var _DataWriteRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on DataWriteRequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataWriteRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	return nil
}

// DataWriteRequestMetadataValidationError is the validation error returned by
// DataWriteRequestMetadata.Validate if the designated constraints aren't met.
type DataWriteRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataWriteRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataWriteRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataWriteRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataWriteRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataWriteRequestMetadataValidationError) ErrorName() string {
	return "DataWriteRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e DataWriteRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataWriteRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataWriteRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataWriteRequestMetadataValidationError{}

// Validate checks the field values on DataWriteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DataWriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	return nil
}

// DataWriteResponseValidationError is the validation error returned by
// DataWriteResponse.Validate if the designated constraints aren't met.
type DataWriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataWriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataWriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataWriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataWriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataWriteResponseValidationError) ErrorName() string {
	return "DataWriteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DataWriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataWriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataWriteResponseValidationError{}

// Validate checks the field values on RelationshipWriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipWriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return RelationshipWriteRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_RelationshipWriteRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return RelationshipWriteRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return RelationshipWriteRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipWriteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetTuples()); l < 1 || l > 100 {
		return RelationshipWriteRequestValidationError{
			field:  "Tuples",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if item == nil {
			return RelationshipWriteRequestValidationError{
				field:  fmt.Sprintf("Tuples[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationshipWriteRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RelationshipWriteRequestValidationError is the validation error returned by
// RelationshipWriteRequest.Validate if the designated constraints aren't met.
type RelationshipWriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipWriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipWriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipWriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipWriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipWriteRequestValidationError) ErrorName() string {
	return "RelationshipWriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipWriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipWriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipWriteRequestValidationError{}

var _RelationshipWriteRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on RelationshipWriteRequestMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RelationshipWriteRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	return nil
}

// RelationshipWriteRequestMetadataValidationError is the validation error
// returned by RelationshipWriteRequestMetadata.Validate if the designated
// constraints aren't met.
type RelationshipWriteRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipWriteRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipWriteRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipWriteRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipWriteRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipWriteRequestMetadataValidationError) ErrorName() string {
	return "RelationshipWriteRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipWriteRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipWriteRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipWriteRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipWriteRequestMetadataValidationError{}

// Validate checks the field values on RelationshipWriteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipWriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	return nil
}

// RelationshipWriteResponseValidationError is the validation error returned by
// RelationshipWriteResponse.Validate if the designated constraints aren't met.
type RelationshipWriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipWriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipWriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipWriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipWriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipWriteResponseValidationError) ErrorName() string {
	return "RelationshipWriteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipWriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipWriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipWriteResponseValidationError{}

// Validate checks the field values on RelationshipReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipReadRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return RelationshipReadRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_RelationshipReadRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return RelationshipReadRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return RelationshipReadRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipReadRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFilter() == nil {
		return RelationshipReadRequestValidationError{
			field:  "Filter",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipReadRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			return RelationshipReadRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
		}

	}

	if m.GetContinuousToken() != "" {

	}

	return nil
}

// RelationshipReadRequestValidationError is the validation error returned by
// RelationshipReadRequest.Validate if the designated constraints aren't met.
type RelationshipReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipReadRequestValidationError) ErrorName() string {
	return "RelationshipReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipReadRequestValidationError{}

var _RelationshipReadRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on RelationshipReadRequestMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipReadRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	return nil
}

// RelationshipReadRequestMetadataValidationError is the validation error
// returned by RelationshipReadRequestMetadata.Validate if the designated
// constraints aren't met.
type RelationshipReadRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipReadRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipReadRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipReadRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipReadRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipReadRequestMetadataValidationError) ErrorName() string {
	return "RelationshipReadRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipReadRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipReadRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipReadRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipReadRequestMetadataValidationError{}

// Validate checks the field values on RelationshipReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipReadResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationshipReadResponseValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ContinuousToken

	return nil
}

// RelationshipReadResponseValidationError is the validation error returned by
// RelationshipReadResponse.Validate if the designated constraints aren't met.
type RelationshipReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipReadResponseValidationError) ErrorName() string {
	return "RelationshipReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipReadResponseValidationError{}

// Validate checks the field values on AttributeReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AttributeReadRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return AttributeReadRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_AttributeReadRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return AttributeReadRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetMetadata() == nil {
		return AttributeReadRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttributeReadRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFilter() == nil {
		return AttributeReadRequestValidationError{
			field:  "Filter",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttributeReadRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			return AttributeReadRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
		}

	}

	if m.GetContinuousToken() != "" {

	}

	return nil
}

// AttributeReadRequestValidationError is the validation error returned by
// AttributeReadRequest.Validate if the designated constraints aren't met.
type AttributeReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeReadRequestValidationError) ErrorName() string {
	return "AttributeReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeReadRequestValidationError{}

var _AttributeReadRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on AttributeReadRequestMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AttributeReadRequestMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	return nil
}

// AttributeReadRequestMetadataValidationError is the validation error returned
// by AttributeReadRequestMetadata.Validate if the designated constraints
// aren't met.
type AttributeReadRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeReadRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeReadRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeReadRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeReadRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeReadRequestMetadataValidationError) ErrorName() string {
	return "AttributeReadRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeReadRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeReadRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeReadRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeReadRequestMetadataValidationError{}

// Validate checks the field values on AttributeReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AttributeReadResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttributeReadResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ContinuousToken

	return nil
}

// AttributeReadResponseValidationError is the validation error returned by
// AttributeReadResponse.Validate if the designated constraints aren't met.
type AttributeReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeReadResponseValidationError) ErrorName() string {
	return "AttributeReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttributeReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeReadResponseValidationError{}

// Validate checks the field values on DataDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DataDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return DataDeleteRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_DataDeleteRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return DataDeleteRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if m.GetTupleFilter() == nil {
		return DataDeleteRequestValidationError{
			field:  "TupleFilter",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTupleFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataDeleteRequestValidationError{
				field:  "TupleFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAttributeFilter() == nil {
		return DataDeleteRequestValidationError{
			field:  "AttributeFilter",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAttributeFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataDeleteRequestValidationError{
				field:  "AttributeFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DataDeleteRequestValidationError is the validation error returned by
// DataDeleteRequest.Validate if the designated constraints aren't met.
type DataDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataDeleteRequestValidationError) ErrorName() string {
	return "DataDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DataDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataDeleteRequestValidationError{}

var _DataDeleteRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on DataDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DataDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	return nil
}

// DataDeleteResponseValidationError is the validation error returned by
// DataDeleteResponse.Validate if the designated constraints aren't met.
type DataDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataDeleteResponseValidationError) ErrorName() string {
	return "DataDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DataDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataDeleteResponseValidationError{}

// Validate checks the field values on RelationshipDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return RelationshipDeleteRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_RelationshipDeleteRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return RelationshipDeleteRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipDeleteRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RelationshipDeleteRequestValidationError is the validation error returned by
// RelationshipDeleteRequest.Validate if the designated constraints aren't met.
type RelationshipDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipDeleteRequestValidationError) ErrorName() string {
	return "RelationshipDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipDeleteRequestValidationError{}

var _RelationshipDeleteRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on RelationshipDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	return nil
}

// RelationshipDeleteResponseValidationError is the validation error returned
// by RelationshipDeleteResponse.Validate if the designated constraints aren't met.
type RelationshipDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipDeleteResponseValidationError) ErrorName() string {
	return "RelationshipDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipDeleteResponseValidationError{}

// Validate checks the field values on BundleRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BundleRunRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return BundleRunRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_BundleRunRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return BundleRunRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	// no validation rules for Name

	// no validation rules for Arguments

	return nil
}

// BundleRunRequestValidationError is the validation error returned by
// BundleRunRequest.Validate if the designated constraints aren't met.
type BundleRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleRunRequestValidationError) ErrorName() string { return "BundleRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e BundleRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleRunRequestValidationError{}

var _BundleRunRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on BundleRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BundleRunResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SnapToken

	return nil
}

// BundleRunResponseValidationError is the validation error returned by
// BundleRunResponse.Validate if the designated constraints aren't met.
type BundleRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleRunResponseValidationError) ErrorName() string {
	return "BundleRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BundleRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleRunResponseValidationError{}

// Validate checks the field values on BundleWriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BundleWriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return BundleWriteRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_BundleWriteRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return BundleWriteRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	for idx, item := range m.GetBundles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BundleWriteRequestValidationError{
					field:  fmt.Sprintf("Bundles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BundleWriteRequestValidationError is the validation error returned by
// BundleWriteRequest.Validate if the designated constraints aren't met.
type BundleWriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleWriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleWriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleWriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleWriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleWriteRequestValidationError) ErrorName() string {
	return "BundleWriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BundleWriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleWriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleWriteRequestValidationError{}

var _BundleWriteRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on BundleWriteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BundleWriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BundleWriteResponseValidationError is the validation error returned by
// BundleWriteResponse.Validate if the designated constraints aren't met.
type BundleWriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleWriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleWriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleWriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleWriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleWriteResponseValidationError) ErrorName() string {
	return "BundleWriteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BundleWriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleWriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleWriteResponseValidationError{}

// Validate checks the field values on BundleReadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BundleReadRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return BundleReadRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_BundleReadRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return BundleReadRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	// no validation rules for Name

	return nil
}

// BundleReadRequestValidationError is the validation error returned by
// BundleReadRequest.Validate if the designated constraints aren't met.
type BundleReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleReadRequestValidationError) ErrorName() string {
	return "BundleReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BundleReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleReadRequestValidationError{}

var _BundleReadRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on BundleReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BundleReadResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBundle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BundleReadResponseValidationError{
				field:  "Bundle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BundleReadResponseValidationError is the validation error returned by
// BundleReadResponse.Validate if the designated constraints aren't met.
type BundleReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleReadResponseValidationError) ErrorName() string {
	return "BundleReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BundleReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleReadResponseValidationError{}

// Validate checks the field values on BundleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BundleDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTenantId()) > 128 {
		return BundleDeleteRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_BundleDeleteRequest_TenantId_Pattern.MatchString(m.GetTenantId()) {
		return BundleDeleteRequestValidationError{
			field:  "TenantId",
			reason: "value does not match regex pattern \"^([a-zA-Z0-9_\\\\-@\\\\.:+]{1,128}|\\\\*)$\"",
		}
	}

	// no validation rules for Name

	return nil
}

// BundleDeleteRequestValidationError is the validation error returned by
// BundleDeleteRequest.Validate if the designated constraints aren't met.
type BundleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleDeleteRequestValidationError) ErrorName() string {
	return "BundleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BundleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleDeleteRequestValidationError{}

var _BundleDeleteRequest_TenantId_Pattern = regexp.MustCompile("^([a-zA-Z0-9_\\-@\\.:+]{1,128}|\\*)$")

// Validate checks the field values on BundleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BundleDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// BundleDeleteResponseValidationError is the validation error returned by
// BundleDeleteResponse.Validate if the designated constraints aren't met.
type BundleDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleDeleteResponseValidationError) ErrorName() string {
	return "BundleDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BundleDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleDeleteResponseValidationError{}

// Validate checks the field values on TenantCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TenantCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetId()) > 64 {
		return TenantCreateRequestValidationError{
			field:  "Id",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_TenantCreateRequest_Id_Pattern.MatchString(m.GetId()) {
		return TenantCreateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"[a-zA-Z0-9-,]+\"",
		}
	}

	if len(m.GetName()) > 64 {
		return TenantCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	return nil
}

// TenantCreateRequestValidationError is the validation error returned by
// TenantCreateRequest.Validate if the designated constraints aren't met.
type TenantCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantCreateRequestValidationError) ErrorName() string {
	return "TenantCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantCreateRequestValidationError{}

var _TenantCreateRequest_Id_Pattern = regexp.MustCompile("[a-zA-Z0-9-,]+")

// Validate checks the field values on TenantCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TenantCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantCreateResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TenantCreateResponseValidationError is the validation error returned by
// TenantCreateResponse.Validate if the designated constraints aren't met.
type TenantCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantCreateResponseValidationError) ErrorName() string {
	return "TenantCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantCreateResponseValidationError{}

// Validate checks the field values on TenantDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TenantDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TenantDeleteRequestValidationError is the validation error returned by
// TenantDeleteRequest.Validate if the designated constraints aren't met.
type TenantDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantDeleteRequestValidationError) ErrorName() string {
	return "TenantDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantDeleteRequestValidationError{}

// Validate checks the field values on TenantDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TenantDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantDeleteResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TenantDeleteResponseValidationError is the validation error returned by
// TenantDeleteResponse.Validate if the designated constraints aren't met.
type TenantDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantDeleteResponseValidationError) ErrorName() string {
	return "TenantDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantDeleteResponseValidationError{}

// Validate checks the field values on TenantListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TenantListRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			return TenantListRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
		}

	}

	if m.GetContinuousToken() != "" {

	}

	return nil
}

// TenantListRequestValidationError is the validation error returned by
// TenantListRequest.Validate if the designated constraints aren't met.
type TenantListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantListRequestValidationError) ErrorName() string {
	return "TenantListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantListRequestValidationError{}

// Validate checks the field values on TenantListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TenantListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTenants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantListResponseValidationError{
					field:  fmt.Sprintf("Tenants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ContinuousToken

	return nil
}

// TenantListResponseValidationError is the validation error returned by
// TenantListResponse.Validate if the designated constraints aren't met.
type TenantListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantListResponseValidationError) ErrorName() string {
	return "TenantListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantListResponseValidationError{}
