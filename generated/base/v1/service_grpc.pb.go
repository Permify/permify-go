// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: base/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionClient is the client API for Permission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionClient interface {
	Check(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error)
	Expand(ctx context.Context, in *PermissionExpandRequest, opts ...grpc.CallOption) (*PermissionExpandResponse, error)
	LookupSchema(ctx context.Context, in *PermissionLookupSchemaRequest, opts ...grpc.CallOption) (*PermissionLookupSchemaResponse, error)
	LookupEntity(ctx context.Context, in *PermissionLookupEntityRequest, opts ...grpc.CallOption) (*PermissionLookupEntityResponse, error)
	LookupEntityStream(ctx context.Context, in *PermissionLookupEntityRequest, opts ...grpc.CallOption) (Permission_LookupEntityStreamClient, error)
}

type permissionClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionClient(cc grpc.ClientConnInterface) PermissionClient {
	return &permissionClient{cc}
}

func (c *permissionClient) Check(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*PermissionCheckResponse, error) {
	out := new(PermissionCheckResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Permission/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) Expand(ctx context.Context, in *PermissionExpandRequest, opts ...grpc.CallOption) (*PermissionExpandResponse, error) {
	out := new(PermissionExpandResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Permission/Expand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) LookupSchema(ctx context.Context, in *PermissionLookupSchemaRequest, opts ...grpc.CallOption) (*PermissionLookupSchemaResponse, error) {
	out := new(PermissionLookupSchemaResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Permission/LookupSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) LookupEntity(ctx context.Context, in *PermissionLookupEntityRequest, opts ...grpc.CallOption) (*PermissionLookupEntityResponse, error) {
	out := new(PermissionLookupEntityResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Permission/LookupEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) LookupEntityStream(ctx context.Context, in *PermissionLookupEntityRequest, opts ...grpc.CallOption) (Permission_LookupEntityStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Permission_ServiceDesc.Streams[0], "/base.v1.Permission/LookupEntityStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &permissionLookupEntityStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Permission_LookupEntityStreamClient interface {
	Recv() (*PermissionLookupEntityStreamResponse, error)
	grpc.ClientStream
}

type permissionLookupEntityStreamClient struct {
	grpc.ClientStream
}

func (x *permissionLookupEntityStreamClient) Recv() (*PermissionLookupEntityStreamResponse, error) {
	m := new(PermissionLookupEntityStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PermissionServer is the server API for Permission service.
// All implementations must embed UnimplementedPermissionServer
// for forward compatibility
type PermissionServer interface {
	Check(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error)
	Expand(context.Context, *PermissionExpandRequest) (*PermissionExpandResponse, error)
	LookupSchema(context.Context, *PermissionLookupSchemaRequest) (*PermissionLookupSchemaResponse, error)
	LookupEntity(context.Context, *PermissionLookupEntityRequest) (*PermissionLookupEntityResponse, error)
	LookupEntityStream(*PermissionLookupEntityRequest, Permission_LookupEntityStreamServer) error
	mustEmbedUnimplementedPermissionServer()
}

// UnimplementedPermissionServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionServer struct {
}

func (UnimplementedPermissionServer) Check(context.Context, *PermissionCheckRequest) (*PermissionCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedPermissionServer) Expand(context.Context, *PermissionExpandRequest) (*PermissionExpandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expand not implemented")
}
func (UnimplementedPermissionServer) LookupSchema(context.Context, *PermissionLookupSchemaRequest) (*PermissionLookupSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSchema not implemented")
}
func (UnimplementedPermissionServer) LookupEntity(context.Context, *PermissionLookupEntityRequest) (*PermissionLookupEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupEntity not implemented")
}
func (UnimplementedPermissionServer) LookupEntityStream(*PermissionLookupEntityRequest, Permission_LookupEntityStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LookupEntityStream not implemented")
}
func (UnimplementedPermissionServer) mustEmbedUnimplementedPermissionServer() {}

// UnsafePermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServer will
// result in compilation errors.
type UnsafePermissionServer interface {
	mustEmbedUnimplementedPermissionServer()
}

func RegisterPermissionServer(s grpc.ServiceRegistrar, srv PermissionServer) {
	s.RegisterService(&Permission_ServiceDesc, srv)
}

func _Permission_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Permission/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).Check(ctx, req.(*PermissionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_Expand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).Expand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Permission/Expand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).Expand(ctx, req.(*PermissionExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_LookupSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionLookupSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).LookupSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Permission/LookupSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).LookupSchema(ctx, req.(*PermissionLookupSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_LookupEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionLookupEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).LookupEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Permission/LookupEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).LookupEntity(ctx, req.(*PermissionLookupEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_LookupEntityStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PermissionLookupEntityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PermissionServer).LookupEntityStream(m, &permissionLookupEntityStreamServer{stream})
}

type Permission_LookupEntityStreamServer interface {
	Send(*PermissionLookupEntityStreamResponse) error
	grpc.ServerStream
}

type permissionLookupEntityStreamServer struct {
	grpc.ServerStream
}

func (x *permissionLookupEntityStreamServer) Send(m *PermissionLookupEntityStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Permission_ServiceDesc is the grpc.ServiceDesc for Permission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.v1.Permission",
	HandlerType: (*PermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Permission_Check_Handler,
		},
		{
			MethodName: "Expand",
			Handler:    _Permission_Expand_Handler,
		},
		{
			MethodName: "LookupSchema",
			Handler:    _Permission_LookupSchema_Handler,
		},
		{
			MethodName: "LookupEntity",
			Handler:    _Permission_LookupEntity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LookupEntityStream",
			Handler:       _Permission_LookupEntityStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "base/v1/service.proto",
}

// SchemaClient is the client API for Schema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaClient interface {
	Write(ctx context.Context, in *SchemaWriteRequest, opts ...grpc.CallOption) (*SchemaWriteResponse, error)
	Read(ctx context.Context, in *SchemaReadRequest, opts ...grpc.CallOption) (*SchemaReadResponse, error)
}

type schemaClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaClient(cc grpc.ClientConnInterface) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) Write(ctx context.Context, in *SchemaWriteRequest, opts ...grpc.CallOption) (*SchemaWriteResponse, error) {
	out := new(SchemaWriteResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Schema/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) Read(ctx context.Context, in *SchemaReadRequest, opts ...grpc.CallOption) (*SchemaReadResponse, error) {
	out := new(SchemaReadResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Schema/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServer is the server API for Schema service.
// All implementations must embed UnimplementedSchemaServer
// for forward compatibility
type SchemaServer interface {
	Write(context.Context, *SchemaWriteRequest) (*SchemaWriteResponse, error)
	Read(context.Context, *SchemaReadRequest) (*SchemaReadResponse, error)
	mustEmbedUnimplementedSchemaServer()
}

// UnimplementedSchemaServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaServer struct {
}

func (UnimplementedSchemaServer) Write(context.Context, *SchemaWriteRequest) (*SchemaWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedSchemaServer) Read(context.Context, *SchemaReadRequest) (*SchemaReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSchemaServer) mustEmbedUnimplementedSchemaServer() {}

// UnsafeSchemaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaServer will
// result in compilation errors.
type UnsafeSchemaServer interface {
	mustEmbedUnimplementedSchemaServer()
}

func RegisterSchemaServer(s grpc.ServiceRegistrar, srv SchemaServer) {
	s.RegisterService(&Schema_ServiceDesc, srv)
}

func _Schema_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Schema/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Write(ctx, req.(*SchemaWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Schema/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Read(ctx, req.(*SchemaReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Schema_ServiceDesc is the grpc.ServiceDesc for Schema service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schema_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.v1.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Schema_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Schema_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/v1/service.proto",
}

// RelationshipClient is the client API for Relationship service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationshipClient interface {
	Write(ctx context.Context, in *RelationshipWriteRequest, opts ...grpc.CallOption) (*RelationshipWriteResponse, error)
	Read(ctx context.Context, in *RelationshipReadRequest, opts ...grpc.CallOption) (*RelationshipReadResponse, error)
	Delete(ctx context.Context, in *RelationshipDeleteRequest, opts ...grpc.CallOption) (*RelationshipDeleteResponse, error)
}

type relationshipClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationshipClient(cc grpc.ClientConnInterface) RelationshipClient {
	return &relationshipClient{cc}
}

func (c *relationshipClient) Write(ctx context.Context, in *RelationshipWriteRequest, opts ...grpc.CallOption) (*RelationshipWriteResponse, error) {
	out := new(RelationshipWriteResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Relationship/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipClient) Read(ctx context.Context, in *RelationshipReadRequest, opts ...grpc.CallOption) (*RelationshipReadResponse, error) {
	out := new(RelationshipReadResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Relationship/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipClient) Delete(ctx context.Context, in *RelationshipDeleteRequest, opts ...grpc.CallOption) (*RelationshipDeleteResponse, error) {
	out := new(RelationshipDeleteResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Relationship/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationshipServer is the server API for Relationship service.
// All implementations must embed UnimplementedRelationshipServer
// for forward compatibility
type RelationshipServer interface {
	Write(context.Context, *RelationshipWriteRequest) (*RelationshipWriteResponse, error)
	Read(context.Context, *RelationshipReadRequest) (*RelationshipReadResponse, error)
	Delete(context.Context, *RelationshipDeleteRequest) (*RelationshipDeleteResponse, error)
	mustEmbedUnimplementedRelationshipServer()
}

// UnimplementedRelationshipServer must be embedded to have forward compatible implementations.
type UnimplementedRelationshipServer struct {
}

func (UnimplementedRelationshipServer) Write(context.Context, *RelationshipWriteRequest) (*RelationshipWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedRelationshipServer) Read(context.Context, *RelationshipReadRequest) (*RelationshipReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRelationshipServer) Delete(context.Context, *RelationshipDeleteRequest) (*RelationshipDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRelationshipServer) mustEmbedUnimplementedRelationshipServer() {}

// UnsafeRelationshipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationshipServer will
// result in compilation errors.
type UnsafeRelationshipServer interface {
	mustEmbedUnimplementedRelationshipServer()
}

func RegisterRelationshipServer(s grpc.ServiceRegistrar, srv RelationshipServer) {
	s.RegisterService(&Relationship_ServiceDesc, srv)
}

func _Relationship_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Relationship/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServer).Write(ctx, req.(*RelationshipWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relationship_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Relationship/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServer).Read(ctx, req.(*RelationshipReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relationship_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Relationship/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServer).Delete(ctx, req.(*RelationshipDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relationship_ServiceDesc is the grpc.ServiceDesc for Relationship service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relationship_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.v1.Relationship",
	HandlerType: (*RelationshipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Relationship_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Relationship_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Relationship_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/v1/service.proto",
}

// WelcomeClient is the client API for Welcome service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WelcomeClient interface {
	Hello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WelcomeResponse, error)
}

type welcomeClient struct {
	cc grpc.ClientConnInterface
}

func NewWelcomeClient(cc grpc.ClientConnInterface) WelcomeClient {
	return &welcomeClient{cc}
}

func (c *welcomeClient) Hello(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WelcomeResponse, error) {
	out := new(WelcomeResponse)
	err := c.cc.Invoke(ctx, "/base.v1.Welcome/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WelcomeServer is the server API for Welcome service.
// All implementations must embed UnimplementedWelcomeServer
// for forward compatibility
type WelcomeServer interface {
	Hello(context.Context, *emptypb.Empty) (*WelcomeResponse, error)
	mustEmbedUnimplementedWelcomeServer()
}

// UnimplementedWelcomeServer must be embedded to have forward compatible implementations.
type UnimplementedWelcomeServer struct {
}

func (UnimplementedWelcomeServer) Hello(context.Context, *emptypb.Empty) (*WelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedWelcomeServer) mustEmbedUnimplementedWelcomeServer() {}

// UnsafeWelcomeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WelcomeServer will
// result in compilation errors.
type UnsafeWelcomeServer interface {
	mustEmbedUnimplementedWelcomeServer()
}

func RegisterWelcomeServer(s grpc.ServiceRegistrar, srv WelcomeServer) {
	s.RegisterService(&Welcome_ServiceDesc, srv)
}

func _Welcome_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelcomeServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.Welcome/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelcomeServer).Hello(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Welcome_ServiceDesc is the grpc.ServiceDesc for Welcome service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Welcome_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.v1.Welcome",
	HandlerType: (*WelcomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Welcome_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/v1/service.proto",
}
