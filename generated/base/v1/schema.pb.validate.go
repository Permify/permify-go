// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: base/v1/schema.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Child with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Child) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Child_Leaf:

		if m.GetLeaf() == nil {
			return ChildValidationError{
				field:  "Leaf",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetLeaf()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChildValidationError{
					field:  "Leaf",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Child_Rewrite:

		if m.GetRewrite() == nil {
			return ChildValidationError{
				field:  "Rewrite",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetRewrite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChildValidationError{
					field:  "Rewrite",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ChildValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ChildValidationError is the validation error returned by Child.Validate if
// the designated constraints aren't met.
type ChildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildValidationError) ErrorName() string { return "ChildValidationError" }

// Error satisfies the builtin error interface
func (e ChildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildValidationError{}

// Validate checks the field values on Leaf with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Leaf) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Exclusion

	switch m.Type.(type) {

	case *Leaf_ComputedUserSet:

		if m.GetComputedUserSet() == nil {
			return LeafValidationError{
				field:  "ComputedUserSet",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetComputedUserSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LeafValidationError{
					field:  "ComputedUserSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Leaf_TupleToUserSet:

		if m.GetTupleToUserSet() == nil {
			return LeafValidationError{
				field:  "TupleToUserSet",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetTupleToUserSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LeafValidationError{
					field:  "TupleToUserSet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return LeafValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// LeafValidationError is the validation error returned by Leaf.Validate if the
// designated constraints aren't met.
type LeafValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeafValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeafValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeafValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeafValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeafValidationError) ErrorName() string { return "LeafValidationError" }

// Error satisfies the builtin error interface
func (e LeafValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeafValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeafValidationError{}

// Validate checks the field values on Rewrite with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Rewrite) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RewriteOperation

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RewriteValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RewriteValidationError is the validation error returned by Rewrite.Validate
// if the designated constraints aren't met.
type RewriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewriteValidationError) ErrorName() string { return "RewriteValidationError" }

// Error satisfies the builtin error interface
func (e RewriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewrite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewriteValidationError{}

// Validate checks the field values on IndexedSchema with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IndexedSchema) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetEntityDefinitions() {
		_ = val

		// no validation rules for EntityDefinitions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexedSchemaValidationError{
					field:  fmt.Sprintf("EntityDefinitions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetRelationDefinitions() {
		_ = val

		// no validation rules for RelationDefinitions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexedSchemaValidationError{
					field:  fmt.Sprintf("RelationDefinitions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetActionDefinitions() {
		_ = val

		// no validation rules for ActionDefinitions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexedSchemaValidationError{
					field:  fmt.Sprintf("ActionDefinitions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// IndexedSchemaValidationError is the validation error returned by
// IndexedSchema.Validate if the designated constraints aren't met.
type IndexedSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexedSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexedSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexedSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexedSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexedSchemaValidationError) ErrorName() string { return "IndexedSchemaValidationError" }

// Error satisfies the builtin error interface
func (e IndexedSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexedSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexedSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexedSchemaValidationError{}

// Validate checks the field values on EntityDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EntityDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return EntityDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_EntityDefinition_Name_Pattern.MatchString(m.GetName()) {
		return EntityDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	for key, val := range m.GetRelations() {
		_ = val

		// no validation rules for Relations[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityDefinitionValidationError{
					field:  fmt.Sprintf("Relations[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetActions() {
		_ = val

		// no validation rules for Actions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityDefinitionValidationError{
					field:  fmt.Sprintf("Actions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for References

	// no validation rules for Option

	return nil
}

// EntityDefinitionValidationError is the validation error returned by
// EntityDefinition.Validate if the designated constraints aren't met.
type EntityDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityDefinitionValidationError) ErrorName() string { return "EntityDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e EntityDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityDefinitionValidationError{}

var _EntityDefinition_Name_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on RelationDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return RelationDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_RelationDefinition_Name_Pattern.MatchString(m.GetName()) {
		return RelationDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	if v, ok := interface{}(m.GetEntityReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationDefinitionValidationError{
				field:  "EntityReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRelationReferences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationDefinitionValidationError{
					field:  fmt.Sprintf("RelationReferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Option

	return nil
}

// RelationDefinitionValidationError is the validation error returned by
// RelationDefinition.Validate if the designated constraints aren't met.
type RelationDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationDefinitionValidationError) ErrorName() string {
	return "RelationDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e RelationDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationDefinitionValidationError{}

var _RelationDefinition_Name_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on ActionDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ActionDefinition) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return ActionDefinitionValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_ActionDefinition_Name_Pattern.MatchString(m.GetName()) {
		return ActionDefinitionValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	if v, ok := interface{}(m.GetChild()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionDefinitionValidationError{
				field:  "Child",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ActionDefinitionValidationError is the validation error returned by
// ActionDefinition.Validate if the designated constraints aren't met.
type ActionDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionDefinitionValidationError) ErrorName() string { return "ActionDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e ActionDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionDefinitionValidationError{}

var _ActionDefinition_Name_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on RelationReference with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RelationReference) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) > 64 {
		return RelationReferenceValidationError{
			field:  "Name",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_RelationReference_Name_Pattern.MatchString(m.GetName()) {
		return RelationReferenceValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	return nil
}

// RelationReferenceValidationError is the validation error returned by
// RelationReference.Validate if the designated constraints aren't met.
type RelationReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationReferenceValidationError) ErrorName() string {
	return "RelationReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e RelationReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationReferenceValidationError{}

var _RelationReference_Name_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on ComputedUserSet with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ComputedUserSet) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRelation()) > 64 {
		return ComputedUserSetValidationError{
			field:  "Relation",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_ComputedUserSet_Relation_Pattern.MatchString(m.GetRelation()) {
		return ComputedUserSetValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-z][a-z0-9_]{1,62}[a-z0-9]$\"",
		}
	}

	return nil
}

// ComputedUserSetValidationError is the validation error returned by
// ComputedUserSet.Validate if the designated constraints aren't met.
type ComputedUserSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputedUserSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputedUserSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputedUserSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputedUserSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputedUserSetValidationError) ErrorName() string { return "ComputedUserSetValidationError" }

// Error satisfies the builtin error interface
func (e ComputedUserSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputedUserSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputedUserSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputedUserSetValidationError{}

var _ComputedUserSet_Relation_Pattern = regexp.MustCompile("^[a-z][a-z0-9_]{1,62}[a-z0-9]$")

// Validate checks the field values on TupleSet with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TupleSet) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRelation()) > 64 {
		return TupleSetValidationError{
			field:  "Relation",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_TupleSet_Relation_Pattern.MatchString(m.GetRelation()) {
		return TupleSetValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-z][a-z0-9_]{1,62}[a-z0-9]$\"",
		}
	}

	return nil
}

// TupleSetValidationError is the validation error returned by
// TupleSet.Validate if the designated constraints aren't met.
type TupleSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleSetValidationError) ErrorName() string { return "TupleSetValidationError" }

// Error satisfies the builtin error interface
func (e TupleSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleSetValidationError{}

var _TupleSet_Relation_Pattern = regexp.MustCompile("^[a-z][a-z0-9_]{1,62}[a-z0-9]$")

// Validate checks the field values on TupleToUserSet with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TupleToUserSet) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTupleSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleToUserSetValidationError{
				field:  "TupleSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetComputed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleToUserSetValidationError{
				field:  "Computed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TupleToUserSetValidationError is the validation error returned by
// TupleToUserSet.Validate if the designated constraints aren't met.
type TupleToUserSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleToUserSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleToUserSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleToUserSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleToUserSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleToUserSetValidationError) ErrorName() string { return "TupleToUserSetValidationError" }

// Error satisfies the builtin error interface
func (e TupleToUserSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleToUserSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleToUserSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleToUserSetValidationError{}
