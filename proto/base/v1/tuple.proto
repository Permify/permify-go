syntax = "proto3";
package base.v1;

option go_package = "github.com/Permify/permify/pkg/pb/base/v1";

import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

// Tuple
message Tuple {
  Entity entity = 1 [json_name = "entity", (validate.rules).message.required = true];

  string relation = 2 [json_name = "relation", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
  }];

  Subject subject = 3 [json_name = "subject", (validate.rules).message.required = true];
}

// Tuples
message Tuples {
  repeated Tuple tuples = 1;
}

// Entity
message Entity {
  string type = 1 [json_name = "type", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
  }];

  string id = 2 [json_name = "id", (validate.rules).string = {
    pattern : "^(([a-zA-Z0-9_][a-zA-Z0-9_|-]{0,127})|\\*)$",
    max_bytes : 128,
  }];
}

message EntityAndRelation {
  Entity entity = 1 [(validate.rules).message.required = true];

  string relation = 2 [(validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,64}[a-z0-9])$",
    max_bytes : 64,
  }];
}

// Subject
message Subject {
  string type = 1 [json_name = "type", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
  }];

  string id = 2 [json_name = "id", (validate.rules).string = {
    pattern : "^(([a-zA-Z0-9_][a-zA-Z0-9_|-]{0,127})|\\*)$",
    max_bytes : 128,
  }];

  string relation = 3 [json_name = "relation", (validate.rules).string = {
    pattern : "^([.&a-z][.&a-z0-9_]{1,62}[.&a-z0-9])$",
    max_bytes : 64,
    ignore_empty: true,
  }];
}

// Filters

// TupleFilter is used to filter tuples
message TupleFilter {
  EntityFilter entity = 1 [(validate.rules).message.required = true];

  string relation = 2 [(validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
    ignore_empty: true,
  }];

  SubjectFilter subject = 3 [json_name = "subject"];
}

// EntityAndRelationFilter is used to filter entities and relations
message EntityAndRelationFilter {
  EntityFilter entity = 1 [(validate.rules).message.required = true];

  string relation = 2 [(validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,64}[a-z0-9])$",
    max_bytes : 64,
    ignore_empty: true,
  }];
}

// EntityFilter is used to filter entities
message EntityFilter {
  string type = 1 [json_name = "type"];

  repeated string ids = 2 [json_name = "ids"];
}

// SubjectFilter is used to filter subjects
message SubjectFilter {
  string type = 1 [json_name = "type"];

  repeated string ids = 2 [json_name = "ids"];

  string relation = 3 [(validate.rules).string = {
    pattern : "^([.&a-z][.&a-z0-9_]{1,62}[.&a-z0-9])$",
    max_bytes : 64,
    ignore_empty: true,
  }];
}

// ExpandTreeNode
message ExpandTreeNode {
  // Operation
  enum Operation {
    OPERATION_UNSPECIFIED = 0;
    OPERATION_UNION = 1;
    OPERATION_INTERSECTION = 2;
  }

  Operation operation = 1;

  repeated Expand children = 2;
}

// Expand
message Expand {
  oneof node {
    ExpandTreeNode expand = 1;
    Result leaf = 2;
  }
}

// Result
message Result {
  EntityAndRelation target = 1;
  bool exclusion = 2;
  repeated Subject subjects = 3;
}

// Tenant
message Tenant {
  string id = 1 [json_name = "id"];
  string name = 2 [json_name = "name"];
  google.protobuf.Timestamp created_at = 3 [json_name = "created_at"];
}